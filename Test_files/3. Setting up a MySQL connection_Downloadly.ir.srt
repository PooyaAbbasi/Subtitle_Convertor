1
00:00:00,000 --> 00:00:02,340
Django is so popular because

2
00:00:02,340 --> 00:00:04,290
it's open source with a rich set

3
00:00:04,290 --> 00:00:05,595
of tools that allow for

4
00:00:05,595 --> 00:00:08,460
easy scalability and
rapid development.

5
00:00:08,460 --> 00:00:13,170
MySQL is one of the many
databases which Django supports.

6
00:00:13,170 --> 00:00:16,110
Recall that database has
helped store data from

7
00:00:16,110 --> 00:00:17,610
different sources that can

8
00:00:17,610 --> 00:00:19,260
be used for different purposes,

9
00:00:19,260 --> 00:00:21,870
such as adding
content to a webpage.

10
00:00:21,870 --> 00:00:24,120
The Django development
framework has

11
00:00:24,120 --> 00:00:27,360
internal support for connecting
with different databases.

12
00:00:27,360 --> 00:00:30,765
Previously, you learned that
Django uses something called

13
00:00:30,765 --> 00:00:34,365
an object-relational
mapper or ORM.

14
00:00:34,365 --> 00:00:38,555
ORM facilitates the mapping
of data between databases

15
00:00:38,555 --> 00:00:40,850
and the application
model without

16
00:00:40,850 --> 00:00:43,435
the need to write
any SQL queries.

17
00:00:43,435 --> 00:00:46,940
MySQL is a popular
database management system

18
00:00:46,940 --> 00:00:48,890
and can be used with Django

19
00:00:48,890 --> 00:00:50,915
when there is a heavy data load.

20
00:00:50,915 --> 00:00:54,520
Let's quickly recap some
of the features of MySQL.

21
00:00:54,520 --> 00:00:57,500
It's open source and
well-documented.

22
00:00:57,500 --> 00:00:59,685
It's reliable and quick as

23
00:00:59,685 --> 00:01:02,650
data storage is done
efficiently in memory.

24
00:01:02,650 --> 00:01:04,850
It's scalable and can work with

25
00:01:04,850 --> 00:01:07,010
small to vast amounts of data.

26
00:01:07,010 --> 00:01:08,960
Finally, it's secure and

27
00:01:08,960 --> 00:01:11,000
provides a layer
of security with

28
00:01:11,000 --> 00:01:12,890
encrypted password
protection that is

29
00:01:12,890 --> 00:01:15,640
flexible and verification based.

30
00:01:15,640 --> 00:01:17,465
It's important to know that

31
00:01:17,465 --> 00:01:19,615
before you begin
working with models,

32
00:01:19,615 --> 00:01:22,145
you need to have a
database installed.

33
00:01:22,145 --> 00:01:25,030
Django provides the
SQLite database by

34
00:01:25,030 --> 00:01:28,300
default and no
pre-installation is required.

35
00:01:28,300 --> 00:01:31,375
However, if you want to
use another database,

36
00:01:31,375 --> 00:01:33,850
you must install
and configure it.

37
00:01:33,850 --> 00:01:36,880
Let's now explore the
steps to install and

38
00:01:36,880 --> 00:01:40,280
configure MySQL within
a Django project.

39
00:01:40,280 --> 00:01:43,830
Before you can begin
using MySQL with Django,

40
00:01:43,830 --> 00:01:47,215
ensure that MySQL is
installed on your computer.

41
00:01:47,215 --> 00:01:49,765
Depending on the
operating system in use,

42
00:01:49,765 --> 00:01:51,865
you can use the
different site packages

43
00:01:51,865 --> 00:01:54,710
that are available on
the MySQL website.

44
00:01:54,710 --> 00:01:58,770
The examples in this
video refer to macOS.

45
00:01:58,770 --> 00:02:00,810
You can find
command-specific too in

46
00:02:00,810 --> 00:02:02,360
their operating systems from

47
00:02:02,360 --> 00:02:05,350
the additional reading at
the end of this lesson.

48
00:02:05,350 --> 00:02:08,000
For macOS, you can use

49
00:02:08,000 --> 00:02:09,740
a package manager such as

50
00:02:09,740 --> 00:02:12,445
Homebrew to manage
your installation.

51
00:02:12,445 --> 00:02:16,460
Begin by typing the command
brew install MySQL.

52
00:02:16,460 --> 00:02:19,115
This installs the
MySQL database.

53
00:02:19,115 --> 00:02:23,270
Next, go into MySQL to
access the databases.

54
00:02:23,270 --> 00:02:27,495
Note that there are specific
commands when using macOS.

55
00:02:27,495 --> 00:02:30,935
Now type the command
MySQL dash u

56
00:02:30,935 --> 00:02:35,060
root dash p. Dash u
refers to the username,

57
00:02:35,060 --> 00:02:38,365
whereas root dash
p is the password.

58
00:02:38,365 --> 00:02:42,795
Now press "Enter" to
action a password request.

59
00:02:42,795 --> 00:02:46,340
Notice that the password
entered here matches

60
00:02:46,340 --> 00:02:50,485
the password set for the root
inside the MySQL database.

61
00:02:50,485 --> 00:02:54,185
Inside the shell, go ahead
and type the command,

62
00:02:54,185 --> 00:02:58,729
show databases, and end your
query with a semicolon.

63
00:02:58,729 --> 00:03:00,710
This generates a list of

64
00:03:00,710 --> 00:03:04,450
all the MySQL databases
on your MySQL server.

65
00:03:04,450 --> 00:03:08,640
For example, create a
database called Feedback.

66
00:03:08,640 --> 00:03:10,775
To do this, type the command

67
00:03:10,775 --> 00:03:13,555
create database
feedback semicolon.

68
00:03:13,555 --> 00:03:16,545
Now run the show
databases command again.

69
00:03:16,545 --> 00:03:18,020
Now your list includes

70
00:03:18,020 --> 00:03:21,455
the new feedback database
you've just created.

71
00:03:21,455 --> 00:03:26,425
The next step is to create a
user for the Django project.

72
00:03:26,425 --> 00:03:29,610
Run a command
labeled create user,

73
00:03:29,610 --> 00:03:31,470
apostrophe, admin Django,

74
00:03:31,470 --> 00:03:33,540
apostrophe, identified by,

75
00:03:33,540 --> 00:03:37,170
apostrophe, password,
apostrophe, semicolon.

76
00:03:37,170 --> 00:03:39,880
The password is
the word password.

77
00:03:39,880 --> 00:03:41,330
Note that there may be

78
00:03:41,330 --> 00:03:43,685
variations to this
particular command,

79
00:03:43,685 --> 00:03:46,250
but this is one of the
simplified versions.

80
00:03:46,250 --> 00:03:49,675
Now press "Enter". Next,

81
00:03:49,675 --> 00:03:52,985
you enter the command to grant
permissions to the user.

82
00:03:52,985 --> 00:03:56,725
The final command here
is flush privileges.

83
00:03:56,725 --> 00:04:00,005
Now, the database
is ready to use.

84
00:04:00,005 --> 00:04:04,105
The next step is to install
a database connector.

85
00:04:04,105 --> 00:04:05,850
This is used to allow

86
00:04:05,850 --> 00:04:10,055
the MySQL database to
interact with the Django ORM.

87
00:04:10,055 --> 00:04:14,755
In this example, you'll
use MySQL client library.

88
00:04:14,755 --> 00:04:17,585
There are alternative
options you can use,

89
00:04:17,585 --> 00:04:19,055
such as any of the Python

90
00:04:19,055 --> 00:04:21,260
three database
connector libraries,

91
00:04:21,260 --> 00:04:23,350
that are compatible with Django.

92
00:04:23,350 --> 00:04:26,850
For now, exit the
MySQL shell and type

93
00:04:26,850 --> 00:04:31,525
the command pip3
install mysqlclient.

94
00:04:31,525 --> 00:04:34,940
Note that you may need to
install extra files that

95
00:04:34,940 --> 00:04:36,590
allow this specific library

96
00:04:36,590 --> 00:04:39,130
to work on this
operating system.

97
00:04:39,130 --> 00:04:40,970
Once the database and

98
00:04:40,970 --> 00:04:43,040
the database connector
are in place,

99
00:04:43,040 --> 00:04:47,830
go to the settings.py file
inside the My Project folder.

100
00:04:47,830 --> 00:04:49,820
Here, Django will reference

101
00:04:49,820 --> 00:04:52,790
information about the
database connection.

102
00:04:52,790 --> 00:04:54,890
To use MySQL,

103
00:04:54,890 --> 00:04:57,995
the database needs to be
in a specific format.

104
00:04:57,995 --> 00:05:01,505
Replace the database code
with that of the settings for

105
00:05:01,505 --> 00:05:05,915
MySQL and replace the
database name with feedback.

106
00:05:05,915 --> 00:05:08,600
It's important to know
that in this example,

107
00:05:08,600 --> 00:05:10,909
the database name is feedback.

108
00:05:10,909 --> 00:05:12,380
Always check the name of

109
00:05:12,380 --> 00:05:14,860
the database that you
want to connect to.

110
00:05:14,860 --> 00:05:17,565
Next, replace the user with

111
00:05:17,565 --> 00:05:22,020
admindjango and the
password with password.

112
00:05:22,020 --> 00:05:24,500
The final step
before you can use

113
00:05:24,500 --> 00:05:27,035
the database is to
run the migrations.

114
00:05:27,035 --> 00:05:29,650
Let's run the following
two commands.

115
00:05:29,650 --> 00:05:32,895
First, type the query Python3

116
00:05:32,895 --> 00:05:37,260
manage.py make migrations,
and press "Enter".

117
00:05:37,260 --> 00:05:43,185
Next, type Python3
manage.py migrate.

118
00:05:43,185 --> 00:05:46,895
Notice the list of migrations
you've just performed.

119
00:05:46,895 --> 00:05:49,010
However, your view of this is

120
00:05:49,010 --> 00:05:52,705
limited because there are no
entries inside the database.

121
00:05:52,705 --> 00:05:54,560
In the absence of using

122
00:05:54,560 --> 00:05:57,305
MySQL database for the
majority of the course,

123
00:05:57,305 --> 00:05:59,180
it is always good
to know that there

124
00:05:59,180 --> 00:06:00,950
are alternatives available to

125
00:06:00,950 --> 00:06:03,410
the SQLite database
and these are

126
00:06:03,410 --> 00:06:06,455
installed by default
inside Django.

127
00:06:06,455 --> 00:06:09,215
In this video, you
learned how to set up

128
00:06:09,215 --> 00:06:12,930
a MySQL database
connection in Django.